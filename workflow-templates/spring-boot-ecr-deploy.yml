name: Deploy Spring Boot Service to ECR

# Ïù¥ ÌÖúÌîåÎ¶øÏùÑ Î≥µÏÇ¨ÌïòÏó¨ Í∞Å ÏÑúÎπÑÏä§ repositoryÏùò .github/workflows/ Ìè¥ÎçîÏóê Î∞∞ÏπòÌïòÏÑ∏Ïöî
# 1. {SERVICE_NAME}, {ECR_REPOSITORY}, {PORT} Î∂ÄÎ∂ÑÏùÑ ÏàòÏ†ï
# 2. GitHub Secrets ÏÑ§Ï†ï: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_ACCOUNT_ID

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy without path changes'
        required: false
        default: 'false'

env:
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com
  ECR_REPOSITORY: {ECR_REPOSITORY}  # Ïòà: sesac-hello-pet-ecr-board-service
  SERVICE_NAME: {SERVICE_NAME}      # Ïòà: board-service
  SERVICE_PORT: {PORT}              # Ïòà: 8083

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ env.SERVICE_NAME }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-${{ env.SERVICE_NAME }}-

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Run tests
      run: ./gradlew test --no-daemon

    - name: Build with Gradle
      run: ./gradlew build -x test --no-daemon

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repository if not exists
      run: |
        aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} || \
        aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} \
          --image-scanning-configuration scanOnPush=true \
          --image-tag-mutability MUTABLE

    - name: Build, tag, and push image to Amazon ECR
      env:
        IMAGE_TAG: ${{ github.sha }}
        BRANCH_NAME: ${{ github.ref_name }}
      run: |
        # Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG .

        # ÌÉúÍ∑∏ ÏÉùÏÑ± (Terraform ECR Ï†ïÏ±ÖÏóê ÎßûÍ≤å)
        docker tag $ECR_REPOSITORY:$IMAGE_TAG ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
        docker tag $ECR_REPOSITORY:$IMAGE_TAG ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

        # Î∏åÎûúÏπòÎ≥Ñ ÌÉúÍ∑∏ Ï†ÑÎûµ (IMMUTABLE_WITH_EXCLUSION Ï†ïÏ±Ö Ï§ÄÏàò)
        # TerraformÏóêÏÑú ÎçÆÏñ¥Ïì∞Í∏∞ Í∞ÄÎä•Ìïú ÌÉúÍ∑∏: latest*, dev-*, qa-*
        if [[ "$BRANCH_NAME" == "develop" ]]; then
          docker tag $ECR_REPOSITORY:$IMAGE_TAG ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:dev-develop
          echo "Tagged as dev-develop for develop branch"
        elif [[ "$BRANCH_NAME" == "release" ]]; then
          docker tag $ECR_REPOSITORY:$IMAGE_TAG ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:v$(date +%Y%m%d)-${{ github.sha }}
          echo "Tagged as production version for release branch"
        elif [[ "$BRANCH_NAME" =~ ^dev/.* ]]; then
          docker tag $ECR_REPOSITORY:$IMAGE_TAG ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:dev-${BRANCH_NAME#dev/}
          echo "Tagged as dev-${BRANCH_NAME#dev/} for personal dev branch"
        elif [[ "$BRANCH_NAME" =~ ^qa/.* ]]; then
          docker tag $ECR_REPOSITORY:$IMAGE_TAG ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:qa-${BRANCH_NAME#qa/}
          echo "Tagged as qa-${BRANCH_NAME#qa/} for qa branch"
        fi

        # ECRÏóê Ìë∏Ïãú
        echo "Pushing images to ECR..."
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

        # Î∏åÎûúÏπòÎ≥Ñ Ï∂îÍ∞Ä ÌÉúÍ∑∏ Ìë∏Ïãú
        if [[ "$BRANCH_NAME" == "develop" ]]; then
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:dev-develop
        elif [[ "$BRANCH_NAME" == "release" ]]; then
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:v$(date +%Y%m%d)-${{ github.sha }}
        elif [[ "$BRANCH_NAME" =~ ^dev/.* ]]; then
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:dev-${BRANCH_NAME#dev/}
        elif [[ "$BRANCH_NAME" =~ ^qa/.* ]]; then
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:qa-${BRANCH_NAME#qa/}
        fi

    - name: Get image details
      id: image-details
      run: |
        echo "image-uri=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "image-tag=${{ github.sha }}" >> $GITHUB_OUTPUT

    - name: Summary
      run: |
        echo "## üöÄ ${{ env.SERVICE_NAME }} Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Service | ${{ env.SERVICE_NAME }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Repository | ${{ env.ECR_REPOSITORY }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Image Tag | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Branch | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Port | ${{ env.SERVICE_PORT }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Image URI | ${{ steps.image-details.outputs.image-uri }} |" >> $GITHUB_STEP_SUMMARY

  notify:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.build-and-push.result }}" == "success" ]; then
          echo "‚úÖ ${{ env.SERVICE_NAME }} successfully deployed to ECR"
          echo "üè∑Ô∏è Image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"
        else
          echo "‚ùå ${{ env.SERVICE_NAME }} deployment failed"
          exit 1
        fi